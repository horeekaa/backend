input CreateTag {
  name: String!
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [CreateDescriptivePhoto]
}

input InternalCreateTag {
  _id: ObjectID!
  name: String!
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [InternalCreateDescriptivePhoto]
  proposalStatus: EntityProposalStatus
  submittingAccount: ObjectIDOnly
  recentApprovingAccount: ObjectIDOnly
}

input DatabaseCreateTag {
  _id: ObjectID!
  name: String!
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [ObjectIDOnly]
  proposalStatus: EntityProposalStatus
  submittingAccount: ObjectIDOnly
  recentApprovingAccount: ObjectIDOnly
  proposedChanges: DatabaseUpdateTag
  recentLog: ObjectIDOnly
  createdAt: Time
  updatedAt: Time
}

input UpdateTag {
  _id: ObjectID!
  name: String
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  """
  Leave the field null/empty array or fill it with updates to the product's photos.
  (a) If ID is present, then it will be update operation(s) to existing photos.
  (b) If ID is not present, then it will be additional photo(s)
   appended to the list of product's photos.
  """
  photos: [UpdateDescriptivePhoto]
  proposalStatus: EntityProposalStatus
  proposalStatusReason: String
}

input InternalUpdateTag {
  _id: ObjectID!
  name: String
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [InternalUpdateDescriptivePhoto]
  proposalStatus: EntityProposalStatus
  proposalStatusReason: String
  submittingAccount: ObjectIDOnly
  recentApprovingAccount: ObjectIDOnly
}

input DatabaseUpdateTag {
  _id: ObjectID!
  name: String
  description: String
  isActive: Boolean
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [ObjectIDOnly]
  proposalStatus: EntityProposalStatus
  proposalStatusReason: String
  submittingAccount: ObjectIDOnly
  recentApprovingAccount: ObjectIDOnly
  proposedChanges: DatabaseUpdateTag
  recentLog: ObjectIDOnly
  updatedAt: Time
}

input TagFilterFields {
  _id: ObjectID
  """
  Querying tag using this field will be done using
  pattern matching in the database; which means
  any tags with name containing phrases from
  the queried string will come as the results.
  """
  name: StringFilterField
  startActivePeriod: TimeFilterField
  endActivePeriod: TimeFilterField
  description: StringFilterField
  isActive: BooleanFilterField
  proposalStatus: StringFilterField
  submittingAccount: ObjectIDOnly
  recentApprovingAccount: ObjectIDOnly
  proposedChanges: TagFilterFields
  recentLog: ObjectIDOnly
}

type Tag {
  _id: ObjectID!
  name: String!
  description: String
  isActive: Boolean!
  startActivePeriod: Time
  endActivePeriod: Time
  photos: [DescriptivePhoto]
  proposalStatus: EntityProposalStatus!
  proposalStatusReason: String
  submittingAccount: Account!
  recentApprovingAccount: Account
  proposedChanges: Tag
  recentLog: Logging!
  createdAt: Time!
  updatedAt: Time!
}
